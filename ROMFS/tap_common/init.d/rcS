#!nsh
#
# TAP startup script.
#
#  NOTE: COMMENT LINES ARE REMOVED BEFORE STORED IN ROMFS.
#

# Serial map:
# /dev/ttyS0: GPS
# /dev/ttyS1: GB
# /dev/ttyS2: nsh shell / console
# /dev/ttyS3: payload
# /dev/ttyS4: esc bus
# /dev/ttyS5: RC input

#
# Set default values
#
set AUTOCNF no
set DATAMAN_OPT -r
set FAILSAFE none
set FMU_MODE pwm
set LOG_FILE /fs/microsd/bootlog.txt
set MAV_TYPE none
set MIXER none
set OUTPUT_MODE none
set PWM_DISARMED none
set PWM_OUT none
set PWM_MAX none
set PWM_MIN none
set PWM_RATE none
set VEHICLE_TYPE none

#
# Start CDC/ACM serial driver
#
sercon

#
# Start the ORB (first app to start)
# tone_alarm and tune_control
# is dependent.
#
uorb start

#
# Start the tone_alarm driver.
#
tone_alarm start

#
# Try to mount the microSD card.
#
if mount -t vfat /dev/mmcsd0 /fs/microsd
then
	echo "microSD present"
else
	if mkfatfs /dev/mmcsd0
	then
		if mount -t vfat /dev/mmcsd0 /fs/microsd
		then
			echo "microSD card formatted"
		else
			echo "ERROR [init] Format failed"
			tune_control play -t 17
			set LOG_FILE /dev/null
		fi
	else
		set LOG_FILE /dev/null
	fi
fi

# waypoint storage
# REBOOTWORK this needs to start in parallel
if dataman start $DATAMAN_OPT
then
fi

#
# Start CPU load monitor
#
load_mon start

#
# Load parameters
#
set PARAM_FILE /fs/microsd/params
if mtd start
then
	set PARAM_FILE /fs/mtd_params
fi

param select $PARAM_FILE
if !param load
then
	param reset
fi

#
# Start system state indicator
#
if rgbled_pwm start
then
fi

if rgbled start
then
fi

#
# Set parameters and env variables for selected AUTOSTART
#
if param compare SYS_AUTOSTART 0
then
	param set SYS_AUTOSTART 6001
	param set SYS_AUTOCONFIG 1
fi

#
# Set AUTOCNF flag to use it in AUTOSTART scripts
#
if param compare SYS_AUTOCONFIG 1
then
	# Wipe out params except RC*
	param reset_nostart RC*
	set AUTOCNF yes
fi

# Start canned airframe config
sh /etc/init.d/rc.autostart

#
# If autoconfig parameter was set, reset it and save parameters
#
if [ $AUTOCNF = yes ]
then
	param set SYS_AUTOCONFIG 0
	param save
fi

#
# Set default output if not set
#
if [ $OUTPUT_MODE = none ]
then
	if [ $USE_IO = yes ]
	then
		set OUTPUT_MODE io
	else
		set OUTPUT_MODE fmu
	fi
fi

#
# Start the RC input driver
#
rc_input start

if fmu mode_pwm1
then
fi

#
# Fixed wing setup.
#
if [ $VEHICLE_TYPE = fw ]
then
	if [ $MIXER = none ]
	then
		# Set default mixer for fixed wing if not defined.
		set MIXER AERT
	fi

	if [ $MAV_TYPE = none ]
	then
		# Set a default MAV_TYPE = 1 if not defined.
		set MAV_TYPE 1
	fi

	# Set the mav type parameter.
	param set MAV_TYPE ${MAV_TYPE}

	# Load mixer and configure outputs.
	sh /etc/init.d/rc.interface

	# Start standard fixedwing apps.
	sh /etc/init.d/rc.fw_apps
fi

#
# Multicopter setup.
#
if [ $VEHICLE_TYPE = mc ]
then
	if [ $MIXER = none ]
	then
		echo "MC mixer undefined"
	fi

	if [ $MAV_TYPE = none ]
	then
		# Set a default MAV_TYPE = 2 if not defined.
		set MAV_TYPE 2

		# Use mixer to detect vehicle type
		if [ $MIXER = coax ]
		then
			set MAV_TYPE 3
		fi
		if [ $MIXER = hexa_x -o $MIXER = hexa_+ ]
		then
			set MAV_TYPE 13
		fi
		if [ $MIXER = hexa_cox ]
		then
			set MAV_TYPE 13
		fi
		if [ $MIXER = octo_x -o $MIXER = octo_+ ]
		then
			set MAV_TYPE 14
		fi
		if [ $MIXER = octo_cox -o $MIXER = octo_cox_w ]
		then
			set MAV_TYPE 14
		fi
		if [ $MIXER = tri_y_yaw- -o $MIXER = tri_y_yaw+ ]
		then
			set MAV_TYPE 15
		fi
	fi

	# Set the mav type parameter.
	param set MAV_TYPE ${MAV_TYPE}

	# Load mixer and configure outputs.
	sh /etc/init.d/rc.interface

	# Start standard multicopter apps.
	sh /etc/init.d/rc.mc_apps
fi

#
# VTOL setup.
#
if [ $VEHICLE_TYPE = vtol ]
then
	if [ $MIXER = none ]
	then
		echo "VTOL mixer undefined"
	fi

	if [ $MAV_TYPE = none ]
	then
		# Set a default MAV_TYPE = 19 if not defined.
		set MAV_TYPE 19

		# Use mixer to detect vehicle type.
		if [ $MIXER = firefly6 ]
		then
			set MAV_TYPE 21
		fi
		if [ $MIXER = quad_x_pusher_vtol ]
		then
			set MAV_TYPE 22
		fi
	fi

	# Set the mav type parameter.
	param set MAV_TYPE ${MAV_TYPE}

	# Load mixer and configure outputs.
	sh /etc/init.d/rc.interface

	# Start standard vtol apps.
	sh /etc/init.d/rc.vtol_apps
fi

#
# Generic setup (autostart ID not found).
#
if [ $VEHICLE_TYPE = none ]
then
	echo "No autostart ID found"
	ekf2 start
fi

#
# Use 400 Hz PWM output for landing gear (frequency also affects RGB LED)
#
pwm rate -c 1 -r 400

#
# Load the gear mixer onto fmu
#
mixer load /dev/px4fmu /etc/mixers/gear.mix

gps start -d /dev/ttyS0

#
# Sensors System (start before Commander so Preflight checks are properly run)
#
sh /etc/init.d/rc.sensors

commander start

# Start MAVLink on the gimbal port
#mavlink start -r 1200 -d /dev/ttyS1

# Start MAVLink on USB, developers can use the MAVLink shell
mavlink start -r 60000 -d /dev/ttyACM0 -m config

#
# Logging
#
#if logger start -b 2 -t
#then
#fi

#
# Start the navigator
#
if navigator start
then
fi

#
# Unset all script parameters to free RAM.
#
unset AUTOCNF
unset DATAMAN_OPT
unset FAILSAFE
unset FMU_MODE
unset LOG_FILE
unset MAV_TYPE
unset MIXER
unset OUTPUT_MODE
unset PWM_DISARMED
unset PWM_OUT
unset PWM_MAX
unset PWM_MIN
unset PWM_RATE
unset VEHICLE_TYPE

#
# Boot is complete, inform MAVLink app(s) that the system is now fully up and running.
#
mavlink boot_complete
