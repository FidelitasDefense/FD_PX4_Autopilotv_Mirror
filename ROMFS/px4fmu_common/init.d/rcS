#!nsh
# Un comment and use set +e to ignore and set -e to enable 'exit on error control'
set +e
# Un comment the line below to help debug scripts by printing a trace of the script commands
#set -x
# PX4FMU startup script.
#
# NOTE: environment variable references:
#    If the dollar sign ('$') is followed by a left bracket ('{') then the
#    variable name is terminated with the right bracket character ('}').
#    Otherwise, the variable name goes to the end of the argument.
#
#
# NOTE: COMMENT LINES ARE REMOVED BEFORE STORED IN ROMFS.
#
# UART mapping on FMUv2/3/4:
#
# UART1                 /dev/ttyS0              IO debug (except v4, there ttyS0 is the wifi)
# USART2                /dev/ttyS1              TELEM1 (flow control)
# USART3                /dev/ttyS2              TELEM2 (flow control)
# UART4
# UART7                                                 CONSOLE
# UART8                                                 SERIAL4
#
#
# UART mapping on FMUv5:
#
# UART1                 /dev/ttyS0              GPS
# USART2                /dev/ttyS1              TELEM1 (flow control)
# USART3                /dev/ttyS2              TELEM2 (flow control)
# UART4                 /dev/ttyS3              TELEM4
# USART6                /dev/ttyS4              TELEM3 (flow control)
# UART7                 /dev/ttyS5              ?
# UART8                 /dev/ttyS6              CONSOLE


#
# Declare global script variables and initialize default values
#
set AUTOCNF                  no
set DATAMAN_OPT              ""
set FCONFIG                  /fs/microsd/etc/config.txt
set FEXTRAS                  /fs/microsd/etc/extras.txt
set FRC                      /fs/microsd/etc/rc.txt
set GPS_STARTUP_ARGS         ""
set LOG_FILE                 /fs/microsd/bootlog.txt
set MAV_TYPE                 none
set MIXER                    none
set MIXER_AUX                none
set MODE                     autostart
set OUTPUT_MODE              none
set PARAM_FILE               /fs/microsd/params
set PWM_AUX_DISARMED         p:PWM_AUX_DISARMED
set PWM_AUX_MAX              p:PWM_AUX_MAX
set PWM_AUX_MIN              p:PWM_AUX_MIN
set PWM_AUX_OUT              none
set PWM_AUX_RATE             none
set PWM_DISARMED             p:PWM_DISARMED
set PWM_MAX                  p:PWM_MAX
set PWM_MIN                  p:PWM_MIN
set PWM_OUT                  none
set PWM_RATE                 p:PWM_RATE
set TELEMETRY_DEVICE_0       /dev/ttyACM0
set TELEMETRY_DEVICE_0_ARGS  "-r 800000 -m config -x -f"
set TELEMETRY_DEVICE_0_BAUD  "57600"
set TELEMETRY_DEVICE_1       /dev/ttyS1
set TELEMETRY_DEVICE_1_ARGS  "-r 1200 -f"
set TELEMETRY_DEVICE_1_BAUD  "57600"
set TELEMETRY_DEVICE_2       none
set TELEMETRY_DEVICE_2_ARGS  none
set TELEMETRY_DEVICE_2_BAUD  none
set VEHICLE_TYPE             none

#
# Print full system version
#
ver all

#
# Mount the procfs.
#
mount -t procfs /proc

#
# Start CDC/ACM serial driver
#
sercon

#
# Start the ORB (first app to start)
#
if uorb start
then
	echo "uorb started"
fi

#
# Start tone driver
#
if tone_alarm start
then
	echo "tone_alarm driver started"

	# Play the startup tone
	tune_control play -t 1 &
fi

#
# Try to mount the microSD card.
#
# NOTE: AEROCORE2 and CF2 shouldn't have an sd card
#
if ver hwcmp AEROCORE2 CRAZYFLIE
then
else
	if mount -t vfat /dev/mmcsd0 /fs/microsd
	then
		if hardfault_log check
		then
			tune_control play -t 2 &

			if hardfault_log commit
			then
				hardfault_log reset
				tone_alarm stop
			fi
		fi
	else
		tune_control play -t 4 &

		if mkfatfs /dev/mmcsd0
		then
			if mount -t vfat /dev/mmcsd0 /fs/microsd
			then
				echo "INFO  [init] card formatted"
			else
				echo "ERROR [init] format failed"
				# Play SOS
				tune_control play -t 2 &
				#tune_control play -m "MNBG"
				set LOG_FILE /dev/null
			fi
		else
			set LOG_FILE /dev/null
		fi
	fi


	# Run no SD alarm
	if [ $LOG_FILE == /dev/null ]
	then
		# Play SOS
		tune_control play -t 2 &
	fi
fi

#
# Look for an init script on the microSD card.
# Disable autostart if the script found.
#
if [ -f $FRC ]
then
	sh $FRC
	set MODE custom
fi

if [ $MODE == autostart ]
then
	#
	# Start the memory technology device driver
	#
	if mtd start
	then
		set PARAM_FILE /fs/mtd_params
	fi

	#
	# Select the parameters file
	#
	param select $PARAM_FILE

	#
	# Load the system parameters
	#
	if param load
	then
	else
		if param reset
		then
			echo "Parameters reset"
		fi
	fi

	#
	# Start system state indicators
	#
	if rgbled start
	then
		echo "rgbled started"
	else
		if blinkm start
		then
			echo "blinkm started"
			blinkm systemstate
		fi
	fi

	# FMUv5 may have both PWM I2C RGB LED support
	if rgbled_pwm start
	then
		echo "rgbled_pwm started"
	else
		echo "rgbled_pwm failed to start"
	fi

	#
	# Set AUTOCNF flag to use it in AUTOSTART scripts
	#
	if param compare SYS_AUTOCONFIG 1
	then
		# Wipe out params except RC*, flight modes and total flight time
		param reset_nostart RC* COM_FLTMODE* LND_FLIGHT_T_*
		set AUTOCNF yes
	else
		set AUTOCNF no

		#
		# Release 1.4.0 transitional support:
		# set to old default if unconfigured.
		# this preserves the previous behaviour
		#
		if param compare BAT_N_CELLS 0
		then
			param set BAT_N_CELLS 3
		fi
	fi

	#######################################################################
	#           Start of Board specific configurations settings           #
	#######################################################################
	if ver hwcmp AEROFC_V1
	then
		if param compare SYS_AUTOSTART 0
		then
			set AUTOCNF yes
		fi

		# We don't allow changing AUTOSTART as it doesn't work in
		# other configurations
		param set SYS_AUTOSTART 4070

		set DATAMAN_OPT "-i"
	fi

	if ver hwcmp AEROCORE2
	then
		set DATAMAN_OPT "-f /fs/mtd_dataman"
	fi

	if ver hwcmp CRAZYFLIE
	then
		if param compare SYS_AUTOSTART 0
		then
			set AUTOCNF yes
			param set SYS_AUTOSTART 4900
		fi
	fi

	if ver hwcmp PX4_SAME70XPLAINED_V1
	then
		set GPS_STARTUP_ARGS "-d /dev/ttyS2"
	fi
	#######################################################################
	#            End of Board specific configurations settings            #
	#######################################################################

	#
	# Set parameters and env variables for selected AUTOSTART
	#
	if param compare SYS_AUTOSTART 0
	then
	else
		sh /etc/init.d/rc.autostart
	fi

	#
	# Override parameters from user configuration file
	#
	if [ -f $FCONFIG ]
	then
		echo "Custom: ${FCONFIG}"
		sh $FCONFIG
	fi

	#
	# If autoconfig parameter was set, reset it and save parameters
	#
	if [ $AUTOCNF == yes ]
	then
		# Disable safety switch by default on Pixracer
		if ver hwcmp PX4FMU_V4
		then
			param set CBRK_IO_SAFETY 22027
		fi

		# Run FMU as task on Pixracer and on boards with enough RAM
		if ver hwcmp NXPHLITE_V3 PX4FMU_V4 PX4FMU_V4PRO PX4FMU_V5
		then
			param set SYS_FMU_TASK 1
		fi

		param set SYS_AUTOCONFIG 0
	fi

	#
	# Sensors System (start before Commander so Preflight checks are properly run)
	# commander Needs to be this early for in-air-restarts
	if param compare SYS_HITL 1
	then
		sensors start -h
		commander start --hil
	else
		gps start ${GPS_STARTUP_ARGS}
		sh /etc/init.d/rc.sensors
		commander start
	fi

	#
	# Start uavcan driver according to the UAVCAN_ENABLE value
	#
	if param greater UAVCAN_ENABLE 0
	then
		# Start core UAVCAN module
		if uavcan start
		then
			if param greater UAVCAN_ENABLE 1
			then
				# Start UAVCAN firmware update server and dynamic node ID allocation server
				uavcan start fw
			fi
		else
			tune_control play -t 2 &
		fi
	fi

	#
	# Waypoint storage
	# REBOOTWORK this needs to start in parallel
	#
	if dataman start ${DATAMAN_OPT}
	then
		echo "dataman started"
	fi

	#
	# Start the cpu load monitor
	#
	if load_mon start
	then
		echo "load_mon started"
	fi

	#
	# Configure and start mavlink streams
	#
	sh /etc/init.d/rc.mavlink

	#
	# Configure vehicle type specific parameters.
	# NOTE: rc.vehicle_setup is the entry point for rc.interface
	#
	sh /etc/init.d/rc.vehicle_setup

	#
	# Start Thermal Calibration
	# TODO move further up and don't start unnecessary services if we are calibrating
	#
	sh /etc/init.d/rc.thermal_cal

	#
	# Start the navigator
	#
	if navigator start
	then
		echo "navigator started"
	fi

	#
	# Start the logger
	#
	sh /etc/init.d/rc.logging

	#
	# Start the optical flow driver if applicable
	#
	if ver hwcmp MINDPX_V2 PX4FMU_V2 PX4FMU_V4 PX4FMU_V4PRO PX4FMU_V5
	then
		if px4flow start
		then
			echo "px4flow started"
		fi
	fi

	# vmount to control mounts such as gimbals, disabled by default.
	if param compare MNT_MODE_IN -1
	then
	else
		if vmount start
		then
			echo "vmount started"
		fi
	fi

	#
	# Start the camera trigger
	#
	if param greater TRIG_MODE 0
	then
		param set CAM_FBACK_MODE 1

		if camera_trigger start
		then
			echo "camera_trigger started"
		fi

		if camera_feedback start
		then
			echo "camera_feedback started"
		fi
	fi

	#
	# Start any custom addons
	#
	if [ -f $FEXTRAS ]
	then
		echo "Addons script: ${FEXTRAS}"
		sh $FEXTRAS
	fi

# End of autostart
fi

# Boot is complete, inform MAVLink app(s) that the system is now fully up and running
mavlink boot_complete
echo "Boot has completed"

#
# Unset all declared script variables to free RAM
#
unset AUTOCNF
unset DATAMAN_OPT
unset FCONFIG
unset FEXTRAS
unset FRC
unset GPS_STARTUP_ARGS
unset LOG_FILE
unset MAV_TYPE
unset MIXER
unset MIXER_AUX
unset OUTPUT_MODE
unset PARAM_FILE
unset PWM_AUX_DISARMED
unset PWM_AUX_MAX
unset PWM_AUX_MIN
unset PWM_AUX_OUT
unset PWM_AUX_RATE
unset PWM_DISARMED
unset PWM_MAX
unset PWM_MIN
unset PWM_OUT
unset PWM_RATE
unset TELEMETRY_DEVICE_0
unset TELEMETRY_DEVICE_0_ARGS
unset TELEMETRY_DEVICE_0_BAUD
unset TELEMETRY_DEVICE_1
unset TELEMETRY_DEVICE_1_ARGS
unset TELEMETRY_DEVICE_1_BAUD
unset TELEMETRY_DEVICE_2
unset TELEMETRY_DEVICE_2_ARGS
unset TELEMETRY_DEVICE_2_BAUD
unset VEHICLE_TYPE
