/****************************************************************************
 *
 *   Copyright (c) 2012-2019 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/**
 * @file mavlink_service_versions.c
 * Compile-time constants for supported MAVLink microservices
 *
 * @author Timothy Scott <timothy@auterion.com>
 */

#include "mavlink_main.h"
#include "mavlink_service_versions.h"

// TODO microservice versioning: These will be replaced with the autogenerated MAVLink constants
#define MAVLINK_SERVICE_ID_MISSION 1
#define MAVLINK_SERVICE_ID_PARAMETERS 2
#define MAVLINK_SERVICE_ID_CAMERA 3

namespace microservice_versions
{

const service_metadata services_metadata[NUM_SERVICES] {
	{
		.service_id = MAVLINK_SERVICE_UNKNOWN,
		.min_version = 0,
		.max_version = 0
	},
	{
		.service_id = MAVLINK_SERVICE_ID_MISSION,
		.min_version = 1,
		.max_version = 3
	},
	{
		.service_id = MAVLINK_SERVICE_ID_PARAMETERS,
		.min_version = 1,
		.max_version = 1
	},
	{
		.service_id = MAVLINK_SERVICE_ID_CAMERA,
		.min_version = 3,
		.max_version = 30
	}
};

service_status &
MavlinkServiceVersions::get_service_status(uint16_t service_id)
{
	// TODO microservice versions: Maybe we don't have to search, and can just always place service ID 2 at index 2
	for (size_t i = 1; i < microservice_versions::NUM_SERVICES; i++) {
		if (_microservice_versions[i].metadata->service_id == service_id) {
			return _microservice_versions[i];
		}
	}

	return _microservice_versions[0];
}

service_status &
MavlinkServiceVersions::determine_service_version(uint16_t service_id, uint16_t min_version,
		uint16_t max_version)
{
	microservice_versions::service_status &status = get_service_status(service_id);

	if (status.metadata->service_id == microservice_versions::MAVLINK_SERVICE_UNKNOWN) {
		return status;
	}

	if (status.metadata->max_version < min_version || status.metadata->min_version > max_version) {
		status.status = microservice_versions::UNSUPPORTED;
		status.selected_version = 0;

	} else {
		// In this branch, we know that there is overlap, so just pick the smaller of the two max versions.
		status.selected_version =
			status.metadata->max_version < max_version ? status.metadata->max_version : max_version;
		status.status = microservice_versions::SELECTED;
	}

	return status;
}

service_status &
MavlinkServiceVersions::determine_service_version(uint16_t service_id)
{
	microservice_versions::service_status &status = get_service_status(service_id);

	if (status.metadata->service_id == microservice_versions::MAVLINK_SERVICE_UNKNOWN) {
		return status;
	}

	if (status.metadata->max_version == 0) {
		status.status = microservice_versions::UNSUPPORTED;

	} else {
		status.status = microservice_versions::SELECTED;
	}

	status.selected_version = status.metadata->max_version;

	return status;
}


void MavlinkServiceVersions::request_serice_version(uint16_t service_id, uint16_t min_version,
		uint16_t max_version)
{
	_min_version = min_version;
	_max_version = max_version;

	if (service_id == 0) {
		_sending_all_services = true;
		_current_service = 1;

	} else {
		_sending_all_services = false;
		_current_service = service_id;
	}

	set_interval(_default_interval);
	reset_last_sent();
}

const char *MavlinkServiceVersions::get_name() const
{
	return MavlinkServiceVersions::get_name_static();
}

const char *MavlinkServiceVersions::get_name_static()
{
	return "MAVLINK_SERVICE_VERSION";
}

uint16_t MavlinkServiceVersions::get_id_static()
{
	return MAVLINK_MSG_ID_MAVLINK_SERVICE_VERSION;
}

uint16_t MavlinkServiceVersions::get_id()
{
	return get_id_static();
}

MavlinkStream *MavlinkServiceVersions::new_instance(Mavlink *mavlink)
{
	return new MavlinkServiceVersions(mavlink);
}

unsigned MavlinkServiceVersions::get_size()
{
	return MAVLINK_MSG_ID_MAVLINK_SERVICE_VERSION_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

MavlinkServiceVersions::MavlinkServiceVersions(Mavlink *mavlink) : MavlinkStream(mavlink)
{
	_mavlink->set_service_version_stream(this);

	// Initialize microservice versions
	for (size_t i = 0; i < microservice_versions::NUM_SERVICES; i++) {
		_microservice_versions[i] = {
			.metadata = &microservice_versions::services_metadata[i],
			.status = microservice_versions::UNKNOWN,
			.selected_version = 0
		};
	}
}

MavlinkServiceVersions::~MavlinkServiceVersions()
{
	_mavlink->set_service_version_stream(nullptr);
}


bool MavlinkServiceVersions::send(const hrt_abstime t)
{
	if (_current_service > 0 && _current_service < microservice_versions::NUM_SERVICES) {
		mavlink_mavlink_service_version_t msg;

		auto &status = _sending_all_services ? determine_service_version(_current_service)
			       : determine_service_version(_current_service, _min_version,
					       _max_version);

		msg.service_id = _current_service;
		msg.target_system = _mavlink->get_system_id();
		msg.target_component = _mavlink->get_component_id();
		// TODO microservice versioning: How does the handshake work in "stream all services" mode?
		//  The current implementation is to just select my maximum version and hope for the best.
		msg.selected_version = status.selected_version;
		msg.service_min_version = status.metadata->min_version;
		msg.service_max_version = status.metadata->max_version;
		msg.service_flags = status.metadata->min_version == 0 ? 0 : 1;

		mavlink_msg_mavlink_service_version_send_struct(_mavlink->get_channel(), &msg);

		if (_sending_all_services) {
			_current_service++;

		} else {
			_current_service = 0;
		}

		return true;

	} else {
		_default_interval = _interval;
		set_interval(INT_MAX);
		return false;
	}

}
}