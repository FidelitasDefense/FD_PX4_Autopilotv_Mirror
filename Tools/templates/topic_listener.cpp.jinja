/****************************************************************************
 *
 *   Copyright (c) 2015 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/**
 * @file topic_listener.cpp
 *
 * Autogenerated by Tools/msg_generator.py
 *
 * Tool for listening to topics when running flight stack on linux.
 */

#include <drivers/drv_hrt.h>
#include <px4_middleware.h>
#include <px4_app.h>
#include <px4_config.h>
#include <uORB/uORB.h>
#include <string.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>

#ifndef PRIu64
#define PRIu64 "llu"
#endif

#ifndef PRId64
#define PRId64 "lld"
#endif

static bool check_timeout(const hrt_abstime& time) {
    if (hrt_elapsed_time(&time) > 2*1000*1000) {
		printf("Waited for 2 seconds without a message. Giving up.\\n");
        return true;
    }
    return false;
}

{%- for msg in data.keys() | sort %}
#include <uORB/topics/{{ msg }}.h>
{%- endfor %}

extern "C" __EXPORT int listener_main(int argc, char *argv[]);

int listener_main(int argc, char *argv[]) {
	int sub = -1;
	orb_id_t ID;
	if(argc < 2) {
		printf("need at least two arguments: topic name. [optional number of messages to print]\\n");
		return 1;
	}
	unsigned num_msgs = (argc > 2) ? atoi(argv[2]) : 1;")

{%- for msg in data.keys() | sort %}
	{%- set msg_loop = loop %}
	{%- for topic in data[msg].topics | sort %}
		{%- if msg_loop.index == 1 %}
	if (strncmp(argv[1],"{{ topic }}", 50) == 0) {
		{%- else %}
	} else if (strncmp(argv[1],"{{ topic }}", 50) == 0) {
		{%- endif %}
		sub = orb_subscribe(ORB_ID({{ topic }}));
		ID = ORB_ID({{ topic }});
		struct {{ msg }}_s container;
		memset(&container, 0, sizeof(container));
		bool updated;
		unsigned i = 0;
		hrt_abstime start_time = hrt_absolute_time();
		while(i < num_msgs) {
			orb_check(sub,&updated);
			if (i == 0) { updated = true; } else { usleep(500); }
			if (updated) {
				start_time = hrt_absolute_time();
				i++;
				printf("\nTOPIC: {{ topic }} #%d\n", i);
				orb_copy(ID, sub, &container);
				printf("timestamp: %" PRIu64 "\n", container.timestamp);
		{%- for field in data[msg].fields.keys() | sort %}
			{%- if data[msg].fields[field].len > 1 %}
				{# TODO HANDLE ARRAYS #}
			{%- else %}
				{%- if data[msg].fields[field].type == "float32" %}
					printf("{{ field }}: %8.4f\n", (double)container.{{ field }});
				{%- elif data[msg].fields[field].type == "float64" %}
					printf("{{ field }}: %8.4f\n", container.{{ field }});
				{%- endif %}
			{%- endif %}
		{%- endfor %}
			} else {
				if (check_timeout(start_time)) {
					break;
				}
			}
		}
	{%- endfor %}
{%- endfor %}
	} else {
		printf(" Topic did not match any known topics\n");
	}
	orb_unsubscribe(sub);
	return 0;
}
{# vim: set noet ft=jinja fenc=utf-8 ff=unix sts=4 sw=4 ts=4 : #}
